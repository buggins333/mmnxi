{
  
    
        "post0": {
            "title": "Wild Magic Surges",
            "content": "A Comparison of Two Homebrew Methods . In order to make Wild Magic Surges a more frequent occurence, we can tweak the rules to trigger them. Two such tweaks are: . The &quot;Increasing Count&quot; method. Start as usual with a Wild Magic Surge triggering when the player rolls a 1 on their Surge roll. Every time a Surge does not occur, increase the D.C. for avoiding the Surge by one: 1 $ rightarrow$ 2 $ rightarrow$ 3, etc. When a Surge does occur, reset the D.C. to 1. . | The &quot;Decreasing Die&quot; method. Start as usual with a Wild Magic Surge triggering when the player rolls a 1 on their d20 Surge roll. Every time a surge does not occur, decrease the size of the die by one: d20 $ rightarrow$ d12 $ rightarrow$ d10, etc. When a Surge does occur, reset the die to a d20. Here we stop at a d4 and just make the player continue rolling a d4 until they do get a Surge, but you could continue down to a coin flip (d2), and you could even continue from a coin flip to an automatic Surge (rolling a 1 on a &quot;d1&quot;). . | Below we calculate the probabilities of triggering a Wild Magic Surge under both of the above systems. . import numpy as np import pandas as pd import altair as alt dice = [20, 12, 10, 8, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4] count = [*range(1,21)] . First, we build a list of probabilities for not rolling a 1 on each of the dice: d20, d12, d10, ..., d4 . diceP = list(map(lambda x: 1-(1/x), dice)) . We also build a list of probabilities for not rolling (1), (1/2), (1/2/3), etc. on a d20: . countP = list(map(lambda x: 1-(x/20), count)) . Then we multiply the first $i$ probabilities together &mdash; for $i = 1,2,3, dots , 20$ &mdash; to get the probability of going $i$ rolls without a Wild Magic Surge under either system: . diceCDF = [] countCDF = [] for i in range(1,21): diceCDF.append(np.prod(diceP[:i])) countCDF.append(np.prod(countP[:i])) . Lastly, because it&#39;s more intuitive to think about it this way, we subtract each of these probabilities from $1$ to get the probability of encountering a surge in $x$ number of rolls: . diceCDF = list(map(lambda x: 1-x, diceCDF)) countCDF = list(map(lambda x: 1-x, countCDF)) data = [] for i in range(0, len(diceCDF)): data.append([i+1, diceCDF[i], &#39;Decreasing Die&#39;]) data.append([i+1, countCDF[i], &#39;Increasing Count&#39;]) . And now, the fun part, we plot the results! . #collapse df = pd.DataFrame(data, columns=[&#39;Number of Rolls&#39;, &#39;Probability&#39;, &#39;Method&#39;]) df.reset_index() # Create a selection that chooses the nearest point &amp; selects based on x-value nearest = alt.selection(type=&#39;single&#39;, nearest=True, on=&#39;mouseover&#39;, fields=[&#39;Number of Rolls&#39;], empty=&#39;none&#39;) points = alt.Chart(df).mark_circle().encode( x=&#39;Number of Rolls:O&#39;, y=alt.Y(&#39;Probability&#39;, title=&#39;Probability of a Surge&#39;), color=&#39;Method&#39;, opacity=alt.condition(nearest, alt.value(1), alt.value(.6)) ) # Transparent selectors across the chart. This is what tells us # the x-value of the cursor selectors = alt.Chart(df).mark_point().encode( x=&#39;Number of Rolls:O&#39;, opacity=alt.value(0), ).add_selection( nearest ) # Draw text labels near the points, and highlight based on selection text = points.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=alt.condition(nearest, &#39;Probability:Q&#39;,alt.value(&#39; &#39;)) ) # Draw a rule at the location of the selection rules = alt.Chart(df).mark_rule(color=&#39;gray&#39;).encode( x=&#39;Number of Rolls:O&#39;, ).transform_filter( nearest ) # Put the five layers into a chart and bind the data alt.layer( selectors, points, rules, text ).properties( width=600, height=300 ) . . As you can see, the probability of a Wild Magic Surge is generally higher with the Increasing Count method. This is somewhat expected, as the probability is the same initially for both methods, then at the second roll we have: . $$ begin{align} P_{ text{Increasing Count}}(S) = frac{2}{20} &amp;= frac{1}{10} P_{ text{Decreasing Die}}(S) &amp;= frac{1}{12} end{align}$$Similarly for the third roll, where the Increasing Count gives a $3/20$ probability of a surge vs. a $1/10$ for the Decreasing Die. So the Increasing Count takes an early lead which it maintains for the entire 20 rolls. In fact, with the Decreasing Die method where you continue rolling d4&#39;s, you may never roll a Wild Magic Surge, although of course the probability that this happens becomes vanishingly small. . For completeness, here is the same data, but in a table view: . df.pivot(index=&#39;Number of Rolls&#39;, columns=&#39;Method&#39;) . Probability . Method Decreasing Die Increasing Count . Number of Rolls . 1 0.050000 | 0.050000 | . 2 0.129167 | 0.145000 | . 3 0.216250 | 0.273250 | . 4 0.314219 | 0.418600 | . 5 0.428516 | 0.563950 | . 6 0.571387 | 0.694765 | . 7 0.678540 | 0.801597 | . 8 0.758905 | 0.880958 | . 9 0.819179 | 0.934527 | . 10 0.864384 | 0.967264 | . 11 0.898288 | 0.985269 | . 12 0.923716 | 0.994107 | . 13 0.942787 | 0.997938 | . 14 0.957090 | 0.999381 | . 15 0.967818 | 0.999845 | . 16 0.975863 | 0.999969 | . 17 0.981897 | 0.999995 | . 18 0.986423 | 1.000000 | . 19 0.989817 | 1.000000 | . 20 0.992363 | 1.000000 | .",
            "url": "https://buggins333.github.io/mmnxi/dnd/jupyter/2020/05/03/Wild-Magic-Surges.html",
            "relUrl": "/dnd/jupyter/2020/05/03/Wild-Magic-Surges.html",
            "date": " • May 3, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "This is the (brand new) personal blog of Bobby Huggins. I intend for it to serve as a landing page for various exercises and musings with a mathematical or computational bent. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://buggins333.github.io/mmnxi/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://buggins333.github.io/mmnxi/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}